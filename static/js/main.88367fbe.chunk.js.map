{"version":3,"sources":["components/mathOperation.js","components/calc.jsx","App.js","index.js"],"names":["Operations","num1","num2","operation","result","concatNum","numCurrent","numConcat","indexOf","btn","operations","Calc","useState","numbers","setNumbers","setNum1","setNum2","setOperation","addNumber","useCallback","n","spotOperation","o","res","parseFloat","toString","equality","clean","Container","Row","className","Col","xs","Form","Control","type","name","readOnly","value","size","map","e","Button","variant","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAKaA,EAAa,SAACC,EAAMC,EAAMC,GACrC,IAAIC,EAEJ,OAAQD,GACN,IATQ,IAUNC,EAASH,EAAOC,EAChB,MACF,IAXa,IAYXE,EAASH,EAAOC,EAChB,MACF,IAbQ,IAcNE,EAASH,EAAOC,EAChB,MACF,IAfa,IAgBXE,EAASH,EAAOC,EAChB,MACF,QACEE,EAAS,EAGb,OAAOA,GAGIC,EAAY,SAACC,EAAYC,GAIpC,MAHmB,MAAfD,GAAqC,OAAfA,IACxBA,EAAa,IAEG,MAAdC,GAAoC,KAAfD,EAChB,KAES,MAAdC,GAAqBD,EAAWE,QAAQ,MAAQ,EAC3CF,EAEFA,EAAaC,GCjChBE,G,MAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MACrCC,EAAa,CAAC,IAAK,IAAK,IAAK,KAkGpBC,EAhGF,WAAO,IAAD,EACaC,mBAAS,KADtB,mBACVC,EADU,KACDC,EADC,OAEOF,mBAAS,KAFhB,mBAEVX,EAFU,KAEJc,EAFI,OAGOH,mBAAS,MAHhB,mBAGVV,EAHU,KAGJc,EAHI,OAIiBJ,mBAAS,MAJ1B,mBAIVT,EAJU,KAICc,EAJD,KAMXC,EAAYC,uBAChB,SAACC,GACC,IAAIhB,EACc,OAAdD,GACFC,EAASC,EAAUJ,EAAMmB,GACzBL,EAAQX,KAERA,EAASC,EAAUH,EAAMkB,GACzBJ,EAAQZ,IAEVU,EAAWV,KAEb,CAACH,EAAMC,EAAMC,IAGTkB,EAAgBF,uBACpB,SAACG,GACC,GAAkB,OAAdnB,GAIJ,GAAa,OAATD,EAAe,CACjB,IAAMqB,EAAMvB,EAAWwB,WAAWvB,GAAOuB,WAAWtB,GAAOC,GAC3Dc,EAAaK,GACbP,EAAQQ,EAAIE,YACZT,EAAQ,MACRF,EAAWS,EAAIE,kBARfR,EAAaK,KAWjB,CAACrB,EAAMC,EAAMC,IAGTuB,EAAWP,uBAAY,WAC3B,GAAa,OAATjB,EAAJ,CACA,IAAME,EAASJ,EAAWwB,WAAWvB,GAAOuB,WAAWtB,GAAOC,GAC9DW,EAAWV,MACV,CAACH,EAAMC,EAAMC,IAEVwB,EAAQR,uBAAY,WACxBL,EAAW,KACXC,EAAQ,KACRC,EAAQ,MACRC,EAAa,QACZ,IACH,OACE,eAACW,EAAA,EAAD,WACE,4CACA,cAACC,EAAA,EAAD,CAAKC,UAAU,0BAAf,SACE,eAACC,EAAA,EAAD,CAAKC,GAAG,OAAOF,UAAU,eAAzB,UACE,cAACG,EAAA,EAAKC,QAAN,CACEC,KAAK,OACLC,KAAK,UACLN,UAAU,aACVO,SAAS,WACTC,MAAOzB,EACP0B,KAAK,OAGP,qBAAKT,UAAU,iBAAf,SACGrB,EAAI+B,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRJ,KAAK,KACLK,QAAS,kBAAM1B,EAAUuB,IAH3B,SAKGA,SAIP,8BACG/B,EAAW8B,KAAI,SAACC,GAAD,OACd,cAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOJ,KAAK,KAAKK,QAAS,kBAAMvB,EAAcoB,IAA9D,SACGA,SAIP,sBAAKX,UAAU,gBAAf,UACE,cAACY,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAASlB,EAAUI,UAAU,SAApD,eAIA,cAACY,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASjB,EAAOG,UAAU,SAAnD,2BCpFGe,EARH,WACV,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCANgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88367fbe.chunk.js","sourcesContent":["const sum = \"+\";\r\nconst subtract = \"-\";\r\nconst div = \"/\";\r\nconst multiplе = \"*\";\r\n\r\nexport const Operations = (num1, num2, operation) => {\r\n  let result;\r\n\r\n  switch (operation) {\r\n    case sum:\r\n      result = num1 + num2;\r\n      break;\r\n    case subtract:\r\n      result = num1 - num2;\r\n      break;\r\n    case div:\r\n      result = num1 / num2;\r\n      break;\r\n    case multiplе:\r\n      result = num1 * num2;\r\n      break;\r\n    default:\r\n      result = 0;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const concatNum = (numCurrent, numConcat) => {\r\n  if (numCurrent === \"0\" || numCurrent === null) {\r\n    numCurrent = \"\";\r\n  }\r\n  if (numConcat === \".\" && numCurrent === \"\") {\r\n    return \"0.\";\r\n  }\r\n  if (numConcat === \".\" && numCurrent.indexOf(\".\") > -1) {\r\n    return numCurrent;\r\n  }\r\n  return numCurrent + numConcat;\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Button, Form, Col, Row, Container } from \"react-bootstrap\";\r\nimport { concatNum, Operations } from \"./mathOperation\";\r\nimport \"./style/main.css\";\r\n\r\nconst btn = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, \".\"];\r\nconst operations = [\"-\", \"+\", \"*\", \"/\"];\r\n\r\nconst Calc = () => {\r\n  const [numbers, setNumbers] = useState(\"0\");\r\n  const [num1, setNum1] = useState(\"0\");\r\n  const [num2, setNum2] = useState(null);\r\n  const [operation, setOperation] = useState(null);\r\n\r\n  const addNumber = useCallback(\r\n    (n) => {\r\n      let result;\r\n      if (operation === null) {\r\n        result = concatNum(num1, n);\r\n        setNum1(result);\r\n      } else {\r\n        result = concatNum(num2, n);\r\n        setNum2(result);\r\n      }\r\n      setNumbers(result);\r\n    },\r\n    [num1, num2, operation]\r\n  );\r\n\r\n  const spotOperation = useCallback(\r\n    (o) => {\r\n      if (operation === null) {\r\n        setOperation(o);\r\n        return;\r\n      }\r\n      if (num2 !== null) {\r\n        const res = Operations(parseFloat(num1), parseFloat(num2), operation);\r\n        setOperation(o);\r\n        setNum1(res.toString());\r\n        setNum2(null);\r\n        setNumbers(res.toString());\r\n      }\r\n    },\r\n    [num1, num2, operation]\r\n  );\r\n\r\n  const equality = useCallback(() => {\r\n    if (num2 === null) return;\r\n    const result = Operations(parseFloat(num1), parseFloat(num2), operation);\r\n    setNumbers(result);\r\n  }, [num1, num2, operation]);\r\n\r\n  const clean = useCallback(() => {\r\n    setNumbers(\"0\");\r\n    setNum1(\"0\");\r\n    setNum2(null);\r\n    setOperation(null);\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <h1>Calculator</h1>\r\n      <Row className=\"justify-content-center \">\r\n        <Col xs=\"auto\" className=\"main_display\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            name=\"numbers\"\r\n            className=\"text-right\"\r\n            readOnly=\"readonly\"\r\n            value={numbers}\r\n            size=\"lg\"\r\n          />\r\n\r\n          <div className=\"buttons_number\">\r\n            {btn.map((e) => (\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => addNumber(e)}\r\n              >\r\n                {e}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {operations.map((e) => (\r\n              <Button variant=\"dark\" size=\"lg\" onClick={() => spotOperation(e)}>\r\n                {e}\r\n              </Button>\r\n            ))}\r\n          </div>\r\n          <div className=\"buttons_group\">\r\n            <Button variant=\"info\" onClick={equality} className=\"button\">\r\n              =\r\n            </Button>\r\n\r\n            <Button variant=\"danger\" onClick={clean} className=\"button\">\r\n              C\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\nexport default Calc;\r\n","import \"./App.css\";\nimport Calc from \"./components/calc\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Calc />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}